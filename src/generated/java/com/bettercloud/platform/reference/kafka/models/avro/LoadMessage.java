/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bettercloud.platform.reference.kafka.models.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LoadMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoadMessage\",\"namespace\":\"com.bettercloud.platform.reference.kafka.models.avro\",\"fields\":[{\"name\":\"index\",\"type\":\"int\"},{\"name\":\"startTime\",\"type\":\"long\"},{\"name\":\"publishTime\",\"type\":\"long\"},{\"name\":\"diff\",\"type\":\"int\"},{\"name\":\"avgLatency\",\"type\":\"double\"},{\"name\":\"msgPerSec\",\"type\":\"double\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int index;
  @Deprecated public long startTime;
  @Deprecated public long publishTime;
  @Deprecated public int diff;
  @Deprecated public double avgLatency;
  @Deprecated public double msgPerSec;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public LoadMessage() {}

  /**
   * All-args constructor.
   */
  public LoadMessage(java.lang.Integer index, java.lang.Long startTime, java.lang.Long publishTime, java.lang.Integer diff, java.lang.Double avgLatency, java.lang.Double msgPerSec) {
    this.index = index;
    this.startTime = startTime;
    this.publishTime = publishTime;
    this.diff = diff;
    this.avgLatency = avgLatency;
    this.msgPerSec = msgPerSec;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return startTime;
    case 2: return publishTime;
    case 3: return diff;
    case 4: return avgLatency;
    case 5: return msgPerSec;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: index = (java.lang.Integer)value$; break;
    case 1: startTime = (java.lang.Long)value$; break;
    case 2: publishTime = (java.lang.Long)value$; break;
    case 3: diff = (java.lang.Integer)value$; break;
    case 4: avgLatency = (java.lang.Double)value$; break;
    case 5: msgPerSec = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * @param value the value to set.
   */
  public void setIndex(java.lang.Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'publishTime' field.
   */
  public java.lang.Long getPublishTime() {
    return publishTime;
  }

  /**
   * Sets the value of the 'publishTime' field.
   * @param value the value to set.
   */
  public void setPublishTime(java.lang.Long value) {
    this.publishTime = value;
  }

  /**
   * Gets the value of the 'diff' field.
   */
  public java.lang.Integer getDiff() {
    return diff;
  }

  /**
   * Sets the value of the 'diff' field.
   * @param value the value to set.
   */
  public void setDiff(java.lang.Integer value) {
    this.diff = value;
  }

  /**
   * Gets the value of the 'avgLatency' field.
   */
  public java.lang.Double getAvgLatency() {
    return avgLatency;
  }

  /**
   * Sets the value of the 'avgLatency' field.
   * @param value the value to set.
   */
  public void setAvgLatency(java.lang.Double value) {
    this.avgLatency = value;
  }

  /**
   * Gets the value of the 'msgPerSec' field.
   */
  public java.lang.Double getMsgPerSec() {
    return msgPerSec;
  }

  /**
   * Sets the value of the 'msgPerSec' field.
   * @param value the value to set.
   */
  public void setMsgPerSec(java.lang.Double value) {
    this.msgPerSec = value;
  }

  /** Creates a new LoadMessage RecordBuilder */
  public static com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder newBuilder() {
    return new com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder();
  }
  
  /** Creates a new LoadMessage RecordBuilder by copying an existing Builder */
  public static com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder newBuilder(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder other) {
    return new com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder(other);
  }
  
  /** Creates a new LoadMessage RecordBuilder by copying an existing LoadMessage instance */
  public static com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder newBuilder(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage other) {
    return new com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder(other);
  }
  
  /**
   * RecordBuilder for LoadMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoadMessage>
    implements org.apache.avro.data.RecordBuilder<LoadMessage> {

    private int index;
    private long startTime;
    private long publishTime;
    private int diff;
    private double avgLatency;
    private double msgPerSec;

    /** Creates a new Builder */
    private Builder() {
      super(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publishTime)) {
        this.publishTime = data().deepCopy(fields()[2].schema(), other.publishTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.diff)) {
        this.diff = data().deepCopy(fields()[3].schema(), other.diff);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avgLatency)) {
        this.avgLatency = data().deepCopy(fields()[4].schema(), other.avgLatency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.msgPerSec)) {
        this.msgPerSec = data().deepCopy(fields()[5].schema(), other.msgPerSec);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing LoadMessage instance */
    private Builder(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage other) {
            super(com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publishTime)) {
        this.publishTime = data().deepCopy(fields()[2].schema(), other.publishTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.diff)) {
        this.diff = data().deepCopy(fields()[3].schema(), other.diff);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avgLatency)) {
        this.avgLatency = data().deepCopy(fields()[4].schema(), other.avgLatency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.msgPerSec)) {
        this.msgPerSec = data().deepCopy(fields()[5].schema(), other.msgPerSec);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'index' field */
    public java.lang.Integer getIndex() {
      return index;
    }
    
    /** Sets the value of the 'index' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setIndex(int value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'index' field has been set */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'index' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'startTime' field */
    public java.lang.Long getStartTime() {
      return startTime;
    }
    
    /** Sets the value of the 'startTime' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setStartTime(long value) {
      validate(fields()[1], value);
      this.startTime = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'startTime' field has been set */
    public boolean hasStartTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'startTime' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearStartTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'publishTime' field */
    public java.lang.Long getPublishTime() {
      return publishTime;
    }
    
    /** Sets the value of the 'publishTime' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setPublishTime(long value) {
      validate(fields()[2], value);
      this.publishTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'publishTime' field has been set */
    public boolean hasPublishTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'publishTime' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearPublishTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'diff' field */
    public java.lang.Integer getDiff() {
      return diff;
    }
    
    /** Sets the value of the 'diff' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setDiff(int value) {
      validate(fields()[3], value);
      this.diff = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'diff' field has been set */
    public boolean hasDiff() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'diff' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearDiff() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'avgLatency' field */
    public java.lang.Double getAvgLatency() {
      return avgLatency;
    }
    
    /** Sets the value of the 'avgLatency' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setAvgLatency(double value) {
      validate(fields()[4], value);
      this.avgLatency = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'avgLatency' field has been set */
    public boolean hasAvgLatency() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'avgLatency' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearAvgLatency() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'msgPerSec' field */
    public java.lang.Double getMsgPerSec() {
      return msgPerSec;
    }
    
    /** Sets the value of the 'msgPerSec' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder setMsgPerSec(double value) {
      validate(fields()[5], value);
      this.msgPerSec = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'msgPerSec' field has been set */
    public boolean hasMsgPerSec() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'msgPerSec' field */
    public com.bettercloud.platform.reference.kafka.models.avro.LoadMessage.Builder clearMsgPerSec() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public LoadMessage build() {
      try {
        LoadMessage record = new LoadMessage();
        record.index = fieldSetFlags()[0] ? this.index : (java.lang.Integer) defaultValue(fields()[0]);
        record.startTime = fieldSetFlags()[1] ? this.startTime : (java.lang.Long) defaultValue(fields()[1]);
        record.publishTime = fieldSetFlags()[2] ? this.publishTime : (java.lang.Long) defaultValue(fields()[2]);
        record.diff = fieldSetFlags()[3] ? this.diff : (java.lang.Integer) defaultValue(fields()[3]);
        record.avgLatency = fieldSetFlags()[4] ? this.avgLatency : (java.lang.Double) defaultValue(fields()[4]);
        record.msgPerSec = fieldSetFlags()[5] ? this.msgPerSec : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
