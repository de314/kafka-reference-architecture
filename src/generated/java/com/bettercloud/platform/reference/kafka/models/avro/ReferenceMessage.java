/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bettercloud.platform.reference.kafka.models.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReferenceMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReferenceMessage\",\"namespace\":\"com.bettercloud.platform.reference.kafka.models.avro\",\"fields\":[{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String payload;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.String type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ReferenceMessage() {}

  /**
   * All-args constructor.
   */
  public ReferenceMessage(java.lang.String payload, java.lang.Long timestamp, java.lang.String type) {
    this.payload = payload;
    this.timestamp = timestamp;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payload;
    case 1: return timestamp;
    case 2: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payload = (java.lang.String)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: type = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payload' field.
   */
  public java.lang.String getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.String value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /** Creates a new ReferenceMessage RecordBuilder */
  public static com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder newBuilder() {
    return new com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder();
  }
  
  /** Creates a new ReferenceMessage RecordBuilder by copying an existing Builder */
  public static com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder newBuilder(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder other) {
    return new com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder(other);
  }
  
  /** Creates a new ReferenceMessage RecordBuilder by copying an existing ReferenceMessage instance */
  public static com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder newBuilder(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage other) {
    return new com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder(other);
  }
  
  /**
   * RecordBuilder for ReferenceMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReferenceMessage>
    implements org.apache.avro.data.RecordBuilder<ReferenceMessage> {

    private java.lang.String payload;
    private long timestamp;
    private java.lang.String type;

    /** Creates a new Builder */
    private Builder() {
      super(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ReferenceMessage instance */
    private Builder(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage other) {
            super(com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'payload' field */
    public java.lang.String getPayload() {
      return payload;
    }
    
    /** Sets the value of the 'payload' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder setPayload(java.lang.String value) {
      validate(fields()[0], value);
      this.payload = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'payload' field has been set */
    public boolean hasPayload() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'payload' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder setType(java.lang.String value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'type' field */
    public com.bettercloud.platform.reference.kafka.models.avro.ReferenceMessage.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ReferenceMessage build() {
      try {
        ReferenceMessage record = new ReferenceMessage();
        record.payload = fieldSetFlags()[0] ? this.payload : (java.lang.String) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
